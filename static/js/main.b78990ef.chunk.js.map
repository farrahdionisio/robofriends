{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","robot","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAbF,SAACC,GACV,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCeLK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACI,qBAAKJ,UAAU,WAAf,SAEQI,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCFlBC,EAVG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBAAOA,UAAU,mCAAkCU,KAAK,SACjDC,YAAY,gBACZC,SAAUH,OCGdI,EARA,SAACjB,GACZ,OACI,qBAAKkB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKrB,EAAMsB,YCmBJC,E,kDAnBX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDwB,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG9B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAK5B,MAAMsB,a,GAhBEQ,aCqDbC,G,wDA9CX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAlB1C,EAAKZ,MAAQ,CACThB,OAAQ,GACR0B,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAAErB,OAAQiC,S,oBASpC,WACI,MAAgCb,KAAKJ,MAA7BhB,EAAR,EAAQA,OAAQ0B,EAAhB,EAAgBA,YACVQ,EAAiBlC,EAAOmC,QAAO,SAAAjC,GACjC,OAAOA,EAAMT,KAAK2C,cAAcC,SAASX,EAAYU,kBAGzD,OAAQpC,EAAOsC,OAGP,sBAAK1C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUxB,OAAQkC,WAPlC,gD,GA/BMK,IAAMjB,YCITkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b78990ef.chunk.js","sourcesContent":["\r\nconst Card = (props) => {\r\n    const { name, email, id } = props\r\n    return (\r\n        <div className='tc bg-light-green br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true) {\r\n    //     throw new Error('NOOOOO!');\r\n    // }\r\n    return (\r\n        <div className=\"card mh5\">\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","const SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa2 ba b--green bg-lightest-blue\"type='search' \r\n                   placeholder='Search Robots'\r\n                   onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","const Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '3px solid white', height: '900px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n// State - objects that describe app State (parent) >> props (child); something that can change\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(users => {\r\n                this.setState({ robots: users })\r\n            })\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchField: event.target.value})\r\n    }\r\n\r\n    render () {\r\n        const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return !robots.length ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f2\">Robofriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        \r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}